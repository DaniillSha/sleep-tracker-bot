import logging
from datetime import datetime, timedelta
from typing import Dict, Tuple

import numpy as np
import pandas as pd
from scipy import stats

from bot.ai.generator import generate_response
from bot.ai.prompts import format_sleep_recommendation_prompt
from .sleep_visualization import create_sleep_visualizations

logger = logging.getLogger(__name__)

async def calculate_sleep_stats(df: pd.DataFrame) -> Dict:
    # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–Ω–∞
    try:
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_days = 30
        complete_records = len(df.dropna(subset=['feeling_score', 'sleep_hours', 'stress_score', 'food_type', 'sleep_time']))
        complete_percentage = round((complete_records / total_days) * 100)
        
        # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        avg_feeling = round(df['feeling_score'].mean(), 1)
        avg_sleep = round(df['sleep_hours'].mean(), 1)
        avg_stress = round(df['stress_score'].mean(), 1)
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç—ã
        tired_percentage = round((df['tired'].sum() / len(df)) * 100)
        wake_up_percentage = round((df['woke_up'].sum() / len(df)) * 100)
        dreams_percentage = round((df['had_dreams'].sum() / len(df)) * 100)
        
        # –ê–Ω–∞–ª–∏–∑ –µ–¥—ã
        food_counts = df['food_type'].value_counts()
        most_common_food = food_counts.index[0] if not food_counts.empty else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞
        try:
            bedtimes = pd.to_datetime(df['sleep_time'].astype(str), format='%H:%M:%S').dt.time
            total_minutes = sum(t.hour * 60 + t.minute for t in bedtimes)
            avg_minutes = total_minutes / len(bedtimes)
            avg_hours = avg_minutes // 60
            avg_mins = int(avg_minutes % 60)
            avg_bedtime = f"{int(avg_hours):02d}:{avg_mins:02d}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞: {e}")
            avg_bedtime = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        try:
            stress_feeling_corr = round(stats.pearsonr(df['stress_score'], df['feeling_score'])[0], 2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å—Ç—Ä–µ—Å—Å-—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: {e}")
            stress_feeling_corr = 0.0
        
        try:
            food_dummies = pd.get_dummies(df['food_type'])
            if '—Ç—è–∂—ë–ª–∞—è' in food_dummies.columns:
                food_wake_corr = round(stats.pearsonr(
                    food_dummies['—Ç—è–∂—ë–ª–∞—è'],
                    df['woke_up'].astype(int)
                )[0], 2)
            else:
                food_wake_corr = 0.0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –µ–¥–∞-–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è: {e}")
            food_wake_corr = 0.0
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        try:
            plot1_path, plot2_path = create_sleep_visualizations(df)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π: {e}")
            plot1_path = None
            plot2_path = None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_dict = {
            'complete_records': complete_records,
            'complete_percentage': complete_percentage,
            'avg_feeling': avg_feeling,
            'avg_sleep': avg_sleep,
            'tired_percentage': tired_percentage,
            'wake_up_percentage': wake_up_percentage,
            'avg_stress': avg_stress,
            'most_common_food': most_common_food,
            'avg_bedtime': avg_bedtime,
            'dreams_percentage': dreams_percentage,
            'stress_feeling_corr': stress_feeling_corr,
            'food_wake_corr': food_wake_corr,
            'plot1_path': plot1_path,
            'plot2_path': plot2_path
        }
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        try:
            prompt = format_sleep_recommendation_prompt(stats_dict)
            recommendation = await generate_response(prompt)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {e}")
            recommendation = "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ —Å–Ω–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–≤–æ–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫"
        
        stats_dict['recommendation'] = recommendation
        return stats_dict
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ calculate_sleep_stats: {e}")
        raise

def format_stats_message(stats: Dict) -> str:
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    try:
        message = [
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:\n",
            f"üìÖ –î–Ω–µ–π —Å –ø–æ–ª–Ω–æ–π –∑–∞–ø–∏—Å—å—é: {stats['complete_records']} –∏–∑ 30",
            f"üìä –°—Ä–µ–¥–Ω–µ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ —É—Ç—Ä–æ–º: {stats['avg_feeling']} –∏–∑ 10",
            f"üõè –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: {stats['avg_sleep']} —á–∞—Å–æ–≤",
            f"üò¥ –î–Ω–µ–π —Å —É—Å—Ç–∞–ª–æ—Å—Ç—å—é –ø–æ —É—Ç—Ä–∞–º: {stats['tired_percentage']}%",
            f"üåô –ù–æ—á–Ω—ã—Ö –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–π: {stats['wake_up_percentage']}%",
            f"üß† –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º: {stats['avg_stress']} –∏–∑ 10",
            f"üçΩ –ß–∞—â–µ –≤—Å–µ–≥–æ –µ–ª –ø–µ—Ä–µ–¥ —Å–Ω–æ–º: {stats['most_common_food']}",
            f"üïê –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É: {stats['avg_bedtime']}",
            f"üí≠ –°–Ω—ã –±—ã–ª–∏ –≤ {stats['dreams_percentage']}% –Ω–æ—á–µ–π",
            f"üìâ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è '–°—Ç—Ä–µ—Å—Å ‚Üí –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ': {stats['stress_feeling_corr']}",
            f"üîÅ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è '–ï–¥–∞ ‚Üí –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –Ω–æ—á—å—é': {stats['food_wake_corr']}\n",
            f"üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {stats['recommendation']}"
        ]
        
        return "\n".join(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." 