import logging
import random

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from bot.database.db_service import check_user_exists, get_or_create_user, update_user_timezone
from bot.keyboards import analyze_kb, main_menu_kb, timezone_kb
from bot.states import MainMenu, UserSetup
from bot.utils import clear_test_data, generate_test_data

logger = logging.getLogger(__name__)
router = Router()

# –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
MOTIVATION_QUOTES = [
    "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ ‚Äî –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å–¥–µ–ª–∞—Ç—å —Å–µ–±—è —Å–∏–ª—å–Ω–µ–µ üí™",
    "–•–æ—Ä–æ—à–∏–π —Å–æ–Ω ‚Äî —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!",
    "–¢—ã —É–∂–µ –Ω–∞ –ø—É—Ç–∏ –∫ –ª—É—á—à–µ–º—É —Å–µ–±–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π!",
    "–¢–≤–æ—ë —Ç–µ–ª–æ —Å–∫–∞–∂–µ—Ç —Ç–µ–±–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–±–æ—Ç—É ‚ù§Ô∏è",
    "–ú–∞–ª–µ–Ω—å–∫–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Å–æ–∑–¥–∞—é—Ç –±–æ–ª—å—à–∏–µ –ø–µ—Ä–µ–º–µ–Ω—ã üå±",
]

@router.message(F.text == "/start")
async def show_main_menu(message: Message, state: FSMContext, bot: Bot):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    first_name = message.from_user.first_name
    quote = random.choice(MOTIVATION_QUOTES)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await state.set_state(MainMenu.menu)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_exists = await check_user_exists(message.from_user.id)
    
    if not user_exists:
        # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        text = f"""
<b>–ü—Ä–∏–≤–µ—Ç, {first_name}!</b> üëã

–Ø –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–æ–µ–≥–æ —Å–Ω–∞. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –∏ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—é.

–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ú–æ—Å–∫–≤—ã:

‚ú® <i>{quote}</i>
"""
        await bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=timezone_kb())
        await state.set_state(UserSetup.waiting_for_timezone)
    else:
        # –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é
        text = f"""
<b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!</b> üëã

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–Ω–∞ ‚Äî —Ç–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è —Å–Ω–∞ üõå

<b>üß† –ê–Ω–∞–ª–∏–∑ —Å–Ω–∞</b>  
–ü—Ä–æ–π–¥–∏ –æ–ø—Ä–æ—Å ‚Äî –ø–æ–ª—É—á–∏—à—å –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

<b>‚è∞ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>  
–ë–æ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç —É—Ç—Ä–æ–º –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —Ç—ã –Ω–µ –∑–∞–±—ã–ª.

<b>üìÖ –ò—Å—Ç–æ—Ä–∏—è —Å–Ω–∞</b>  
–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ —Ç—ã —Å–ø–∞–ª –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å.

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–Ω–∞</b>  
–£–∑–Ω–∞–π, —á—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ–π —Å–æ–Ω –∏ –∫–∞–∫ –µ–≥–æ —É–ª—É—á—à–∏—Ç—å.

‚ú® <i>{quote}</i>
"""
        await bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=main_menu_kb)

@router.callback_query(UserSetup.waiting_for_timezone, F.data.startswith("tz_"))
async def process_timezone(callback: CallbackQuery, state: FSMContext, bot: Bot):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –∏–∑ callback data (–Ω–∞–ø—Ä–∏–º–µ—Ä, "tz_-3" -> -3)
        offset = int(callback.data.split("_")[1])
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        await get_or_create_user(callback.from_user.id)
        await update_user_timezone(callback.from_user.id, offset)
        logger.info(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {offset}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        text = f"""
<b>–û—Ç–ª–∏—á–Ω–æ!</b> üëå

–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ —Ç–≤–æ–µ–º —Å–Ω–µ? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Ç–≤–æ–π —Ä–µ–∂–∏–º –∏ –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

‚ú® <i>{random.choice(MOTIVATION_QUOTES)}</i>
"""
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=analyze_kb)
        await state.set_state(MainMenu.menu)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=timezone_kb()
        )

@router.callback_query(F.data == "show_main_menu")
async def handle_show_main_menu(callback: CallbackQuery, state: FSMContext, bot: Bot):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.answer()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
    message = Message(
        message_id=callback.message.message_id,
        date=callback.message.date,
        chat=callback.message.chat,
        from_user=callback.from_user,
        text="/start"
    )
    
    await show_main_menu(message, state, bot)

@router.message(F.text == "/generate_test_data")
async def cmd_generate_test_data(message: Message):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        await generate_test_data(message.from_user.id)
        logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await message.answer("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "/clear_test_data")
async def cmd_clear_test_data(message: Message):
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        await message.answer("–£–¥–∞–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        await clear_test_data(message.from_user.id)
        logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await message.answer("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")