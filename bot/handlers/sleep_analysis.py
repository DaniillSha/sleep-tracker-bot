import os
from datetime import datetime
from aiogram import Router, F, types
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from bot.database.db_service import get_sleep_entries_for_month
from bot.ai.sleep_stats import calculate_sleep_stats, format_stats_message
from bot.ai.sleep_visualization import create_sleep_visualizations
from bot.keyboards import back_to_menu
import pandas as pd
from sqlalchemy.ext.asyncio import AsyncSession
import logging
import time

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(F.data == "get_stat")
async def handle_get_stat(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∞"""
    try:
        # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞
        await callback.answer()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_message = await callback.message.answer("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ —Å–Ω–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–Ω–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        sleep_entries = await get_sleep_entries_for_month(callback.from_user.id)
        
        if not sleep_entries:
            await status_message.edit_text("–î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω—É–∂–Ω—ã –∑–∞–ø–∏—Å–∏ —Ö–æ—Ç—è-–±—ã –∑–∞ 30 –¥–Ω–µ–π :(")
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø–∏—Å–∏ –≤ DataFrame
        df = pd.DataFrame([{
            'feeling_score': entry.feeling_score,
            'sleep_hours': entry.sleep_hours,
            'stress_score': entry.stress_score,
            'food_type': entry.food_type,
            'sleep_time': entry.sleep_time,
            'tired': entry.tired,
            'woke_up': entry.woke_up,
            'had_dreams': entry.had_dreams
        } for entry in sleep_entries])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await calculate_sleep_stats(df)
        stats_message = format_stats_message(stats)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_name = callback.from_user.first_name
        final_message = (
            f"*{user_name}*!\n\n"
            f"–ú—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –æ —Å–Ω–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç —Å –Ω–µ–π—Ä–æ–∞–Ω–∞–ª–∏–∑–æ–º:\n\n"
            f"{stats_message}\n\n"
            f"üí° –•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏? "
            f"–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        await status_message.edit_text(final_message, parse_mode="Markdown", reply_markup=back_to_menu)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        try:
            logger.info("Starting plots generation...")
            plot1_path, plot2_path = create_sleep_visualizations(df)
            logger.info(f"Plots generated at paths: {plot1_path}, {plot2_path}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            if plot1_path and os.path.exists(plot1_path):
                logger.info("Sending first plot...")
                await callback.message.answer_photo(
                    types.FSInputFile(plot1_path),
                    caption="üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
                )
                logger.info("First plot sent successfully")
            
            if plot2_path and os.path.exists(plot2_path):
                logger.info("Sending second plot...")
                await callback.message.answer_photo(
                    types.FSInputFile(plot2_path),
                    caption="üìà –¢—Ä–µ–Ω–¥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∞ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è"
                )
                logger.info("Second plot sent successfully")
                
        except Exception as e:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}", exc_info=True)
            
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–Ω–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")